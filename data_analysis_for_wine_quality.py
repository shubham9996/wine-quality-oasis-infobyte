# -*- coding: utf-8 -*-
"""Data Analysis for Wine quality

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/data-analysis-for-wine-quality-4109f344-5c7f-4c83-b865-2b9a4f41542d.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240403/auto/storage/goog4_request%26X-Goog-Date%3D20240403T133534Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D351cf808f0b2586bb60370566fe8fdc5d347f67af8b7c052cf4eb2e55c7486615f4019dd28e0b329573bc2ba1b0a47ba6d99039343a27b83ab982f564c171e9c1a6334027d0adb52e351df90680fafd558bca4911da66513caa91e2c4cdabb3fd7292fcdd2417fa52a4ec4af465efa4e593798a61b5c7cc687147a2366a49a5d69466205d8a3b8d8c981b925abf7a29a740da37a83f5321d0e342df45033672e0f31801fd1149c9d55cac89b09141bd773433fa031d15f65c36d454b78c79b31787756b616b022ac83e35854f0a83b5c8fe9194df0292de092ca6952e40cc2f7fe3d4873046014e492ffe9367f132d239f14a1e2032d9231226895bd72d43be3
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES
# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'wine-quality-dataset:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F1866301%2F3047725%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240403%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240403T133534Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D5be01659424018d91f8f163a2c3d2ed0aca5a4e4dc022e2e6f663e9704a6bc154d7e8b9a62b23b06ff623eab526dd1c02960cbaadd82f8b6f4169b9b3363efdc755d4a22b68684e47ecaa2f0380710b380392bbf4ec0819e65f5a44c07e017a7e0624264a4da6ed251954dd2c6e8d96aaf79b6f900548f92bd619ed18c6258d9b319b25eca15df7b4903773c4228aa0a5ddc649f053e80e71faaa7699cb2a7c0ee0451d8916b6282e48b45b2b49299f2abb17117df1cffacf887c28eef437def5d7914114aeb5ea967e254339434ab0602ca9e4ecd483936a068fa6329fe63ed5d69e06dbad0b2f99fbc2a2a4f3f69a6e233b442c1673fc3e5d669f8de4f06c5'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

"""# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session
"""

# Commented out IPython magic to ensure Python compatibility.
# Import Libraries
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
import warnings as warn

from warnings import filterwarnings
filterwarnings("ignore")

#Read Data
data = pd.read_csv('/kaggle/input/wine-quality-dataset/WineQT.csv')
data

"""## Data Pre-processing And Cleaning"""

data.head()

data.sample(15)

#Missing values
data.isnull().sum()

data.info()

data.nunique()

# Check for duplicates
duplicates = data[data.duplicated()]
print("Number of duplicate rows:", len(duplicates))

#Statistical Description
data.describe()

data.dtypes

"""## EDA"""

# alcohol content
plt.figure(figsize=(8, 6))
sns.histplot(data['alcohol'], bins=20, kde=True)
plt.title('Distribution of Alcohol Content')
plt.xlabel('Alcohol Content')
plt.ylabel('Frequency')
plt.show()

#quality distribution
plt.figure(figsize=(8, 6))
sns.countplot(x='quality', data=data, palette='viridis')
plt.title('Distribution of Wine Quality')
plt.xlabel('Quality')
plt.ylabel('Count')
plt.tight_layout()
plt.show()

#pH vs. fixed acidity
plt.figure(figsize=(8, 6))
sns.scatterplot(x='fixed acidity', y='pH', data=data)
plt.title('pH vs. Fixed Acidity')
plt.xlabel('Fixed Acidity')
plt.ylabel('pH')
plt.show()

#correlation matrix
plt.figure(figsize=(10, 8))
corr_matrix = data.corr()
sns.heatmap(corr_matrix, annot=True, cbar=True)
plt.title('Correlation Matrix')
plt.show()

# quality vs. alcohol content
plt.figure(figsize=(8, 6))
sns.boxplot(x='quality', y='alcohol', data=data)
plt.title(' Alcohol Content by Wine Quality')
plt.xlabel('Quality')
plt.ylabel('Alcohol Content')
plt.show()

#quality vs. volatile acidity
plt.figure(figsize=(8, 6))
sns.violinplot(x='quality', y='volatile acidity', data=data)
plt.title(' Volatile Acidity by Wine Quality')
plt.xlabel('Quality')
plt.ylabel('Volatile Acidity')
plt.show()

sns.pairplot(data, vars=['fixed acidity', 'volatile acidity', 'citric acid', 'alcohol'], hue='quality', diag_kind='hist')
plt.suptitle(' Wine Quality Dataset', y=1.02)
plt.show()

g = sns.FacetGrid(data, col='quality', col_wrap=3)
g.map(sns.boxplot, 'alcohol', color='skyblue')
plt.suptitle('Alcohol Content by Wine Quality', y=1.02)
plt.tight_layout()
plt.show()

#show correlation between target"quality" and other variables
plt.figure(figsize=(8, 6))
X = data.drop('quality', axis=1)
y = data['quality']
X.corrwith(y).plot(kind='bar', grid=True, figsize=(12, 8), title="Correlation with target:quality");

data.hist(bins = 50, figsize = (20,15))
plt.show()

"""## Linear Regression"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Prepare the data
#Column ID can be dropped since its not necessary for our prediction.
X = data.drop('quality', axis=1)
y = data['quality']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X.head()

y

# Create and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("Mean Squared Error:", mse)
print("R-squared Score:", r2)

"""## Logistic Regression"""

#Convert the target variable into a binary classification task
data['good_quality'] = (data['quality'] >= 7).astype(int)

#Prepare the data
X = data.drop(['quality', 'good_quality'], axis=1)
y = data['good_quality']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Create and train the model
from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(X_train, y_train)

#Make predictions
y_pred = model.predict(X_test)

#Evaluate the model
from sklearn.metrics import accuracy_score

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy*100)

"""## Conclusion
- For the specific task of predicting whether a wine is of "good" quality or "not good" quality, logistic regression is more appropriate than linear regression.
- This is because logistic regression is designed for binary classification tasks and provides probabilistic outputs that can be interpreted as the likelihood of a sample belonging to a particular class.
- In contrast, linear regression may not be suitable for this task as it is intended for predicting continuous variables and may not handle binary classification well.
Therefore, in the context of predicting wine quality as a binary classification task, logistic regression is the better choice over linear regression.
"""

